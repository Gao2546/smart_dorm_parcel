import cv2
import threading
import serial
import json
import psycopg2
from pyzbar.pyzbar import decode
from qreader import QReader
import time

# ===================================
# QR Reader ‡πÅ‡∏•‡∏∞ Camera Setup
# ===================================
# ‡∏™‡∏£‡πâ‡∏≤‡∏á QReader instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö YOLOv7-based QR detection
qreader = QReader(model_size='n')  # model_size 'n' = nano model (‡πÄ‡∏•‡πá‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡πá‡∏ß)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
IMAGE_WIDTH = 1280
IMAGE_HEIGHT = 720

# ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á (retry ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
while True:
    try:
        cap = cv2.VideoCapture(0)  # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 0 (default camera)
        break
    except Exception as e:
        print(f"‚ö†Ô∏è Camera init error: {e}, retrying...")
        time.sleep(2)  # ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô retry
        continue

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
cap.set(cv2.CAP_PROP_FRAME_WIDTH, IMAGE_WIDTH)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, IMAGE_HEIGHT)

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö frame ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà capture ‡πÑ‡∏î‡πâ
last_frame = None

# ===================================
# Serial Communication Setup
# ===================================
# ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Serial Port (retry ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
while True:
    try:
        # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Serial ‡∏ó‡∏µ‡πà /dev/ttyS0 ‡∏î‡πâ‡∏ß‡∏¢ baud rate 115200
        ser = serial.Serial('/dev/ttyS0', 115200, timeout=1)
        break
    except Exception as e:
        print(f"‚ö†Ô∏è Serial init error: {e}, retrying...")
        time.sleep(2)  # ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô retry
        continue
    
# ===================================
# Database Connection Setup
# ===================================
# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PostgreSQL
DB_HOST = "db"        # ‡∏ä‡∏∑‡πà‡∏≠ service ‡πÉ‡∏ô Docker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Node.js DB
DB_PORT = 5432
DB_NAME = "smart_dorm_parcel"
DB_USER = "athip"
DB_PASSWORD = "123456"

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
conn = psycopg2.connect(
    host=DB_HOST,
    port=DB_PORT,
    database=DB_NAME,
    user=DB_USER,
    password=DB_PASSWORD
)
conn.autocommit = True  # ‡πÄ‡∏õ‡∏¥‡∏î autocommit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö updates

# ===================================
# Camera Thread Function
# ===================================
def camera_loop():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô thread ‡πÅ‡∏¢‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠ capture ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
    ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö frame ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global last_frame
    """
    global last_frame
    while True:
        ret, frame = cap.read()  # ‡∏≠‡πà‡∏≤‡∏ô frame ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
        if ret:  # ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            # ‡∏ï‡∏±‡∏î frame ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡∏™‡πà‡∏ß‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ (crop ‡∏à‡∏≤‡∏Å‡∏Ç‡∏ß‡∏≤)
            # frame[:, 0:1050] ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á ‡πÄ‡∏≠‡∏≤‡∏ó‡∏∏‡∏Å row ‡πÅ‡∏ï‡πà column 0-1050
            last_frame = frame[:, 0:1050]

# ‡πÄ‡∏£‡∏¥‡πà‡∏° thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö camera loop
threading.Thread(target=camera_loop, daemon=True).start()

# ===================================
# QR Code Reading Functions
# ===================================
def read_qr_code2(frame):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô QR Code ‡∏î‡πâ‡∏ß‡∏¢ YOLOv7 + QReader
    Args:
        frame: ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô QR Code
    Returns:
        str: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô QR Code ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏ß‡∏≤‡∏™‡∏∏‡∏î ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
    """
    # detect ‡πÅ‡∏•‡∏∞ decode QR codes ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö return detection bounding boxes
    decoded_qrs, detections = qreader.detect_and_decode(frame, return_detections=True, is_bgr=True)
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö QR code ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ detection
    if not decoded_qrs or not detections:
        return None

    # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà decode ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö bounding box coordinates
    results = [
        (decoded_qrs[i], detections[i]["bbox_xyxy"][0:2])  # (text, (x1, y1))
        for i in range(len(decoded_qrs))
        if decoded_qrs[i] is not None  # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà decode ‡πÑ‡∏î‡πâ
    ]

    if not results:
        return None

    # ‡∏´‡∏≤ QR code ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏ß‡∏≤‡∏™‡∏∏‡∏î ‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏à‡∏≤‡∏Å x coordinate (bbox[0])
    rightmost = max(results, key=lambda item: item[1][0])
    return rightmost[0]  # return ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°

def read_qr_code1(frame):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô QR Code ‡∏î‡πâ‡∏ß‡∏¢ pyzbar (‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏ö‡∏ö‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
    Args:
        frame: ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô QR Code  
    Returns:
        str: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô QR Code ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏ß‡∏≤‡∏™‡∏∏‡∏î ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
    """
    decoded = decode(frame)  # decode QR codes ‡∏à‡∏≤‡∏Å frame
    if not decoded:
        return None

    # ‡∏´‡∏≤ QR code ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏ß‡∏≤‡∏™‡∏∏‡∏î ‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏à‡∏≤‡∏Å rect.left
    rightmost = max(decoded, key=lambda r: r.rect.left)
    return rightmost.data.decode("utf-8")  # ‡πÅ‡∏õ‡∏•‡∏á bytes ‡πÄ‡∏õ‡πá‡∏ô string

# ===================================
# QR Code Processing Function
# ===================================
def process_qr(qr_text: str) -> int:
    """
    ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• QR code text ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ mapped_label
    Args:
        qr_text: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô QR Code
    Returns:
        int: 
        -1: QR ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô tracking_numbers ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö user
        -2: ‡πÑ‡∏°‡πà‡∏û‡∏ö QR code
        >=0: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏Ç‡∏≠‡∏á user
    """
    if not qr_text:
        return -2  # ‡πÑ‡∏°‡πà‡∏û‡∏ö QR code

    with conn.cursor() as cur:
        # 1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ tracking_number ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        cur.execute("SELECT user_id, status FROM tracking_numbers WHERE tracking_number = %s", (qr_text,))
        row = cur.fetchone()
        if not row:
            return -1  # ‡πÑ‡∏°‡πà‡∏û‡∏ö tracking_number

        user_id, status = row
        
        # 2Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status ‡πÄ‡∏õ‡πá‡∏ô 'scanned' ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        cur.execute("UPDATE tracking_numbers SET status='scanned', updated_at=NOW() WHERE tracking_number=%s", (qr_text,))

        # 3Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
        cur.execute("SELECT dorm_number FROM users WHERE id=%s", (user_id,))
        dorm_row = cur.fetchone()
        if not dorm_row:
            return -1  # ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user

        dorm_number = dorm_row[0]
        try:
            return int(dorm_number)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô integer
        except ValueError:
            return -1  # ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ

# ===================================
# Main Loop
# ===================================
print("‚úÖ Raspberry Pi QR Serial Server with DB started...")

while True:
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ó‡∏≤‡∏á Serial ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if ser.in_waiting:
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Serial ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string
            cmd = ser.readline().decode().strip()
        except Exception as e:
            print(f"‚ö†Ô∏è Serial read error: {e}")
            continue

        # === ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á READ_QR ===
        if cmd == "READ_QR":
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏≠‡∏á
            if not cap.isOpened():
                response = {"error": "Cannot open camera"}
            elif last_frame is None:
                response = {"error": "Failed to capture image"}
            else:
                # ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô QR ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1 (pyzbar) ‡∏Å‡πà‡∏≠‡∏ô
                qr_text = read_qr_code1(last_frame)
                
                # ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2 (YOLOv7)
                if not qr_text:
                    qr_text = read_qr_code2(last_frame)
                
                # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• QR code ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ mapped_label
                mapped_label = process_qr(qr_text)

                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö QR code (-2) ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÑ‡∏ß‡πâ debug
                if mapped_label == -2:
                    cv2.imwrite("/app/output/debug_last_frame.jpg", last_frame)
                    print("‚ö†Ô∏è No QR detected ‚Üí saved debug_last_frame.jpg")

                # ‡∏™‡∏£‡πâ‡∏≤‡∏á response object
                response = {"qr_text": qr_text or "No QR code detected", "mapped_label": mapped_label}
                print(f"üì° QR: {qr_text}, mapped_label: {mapped_label}")

            # ‡∏™‡πà‡∏á response ‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏≤‡∏á Serial ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON
            ser.write((json.dumps(response) + "\n").encode())
        
        # === ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ===
        try:
            data = json.loads(cmd)
        except json.JSONDecodeError:
            print(f"‚ö†Ô∏è Invalid JSON from ESP32: {cmd}")
            continue

        # === ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Update Status ===
        if data.get("type") == "update_status":
            tracking_number = data.get("trackingNumber")
            status = data.get("status")

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
            if tracking_number and status:
                try:
                    with conn.cursor() as cur:
                        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        cur.execute("""
                            UPDATE tracking_numbers 
                            SET status=%s, updated_at=NOW() 
                            WHERE tracking_number=%s
                        """, (status, tracking_number))
                        print(f"‚úÖ Updated {tracking_number} ‚Üí {status}")
                except Exception as e:
                    print(f"‚ùå DB update error: {e}")
            else:
                print("‚ö†Ô∏è Missing fields in update_status request")