/**
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô‡∏•‡∏≥‡πÄ‡∏•‡∏µ‡∏¢‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏û‡∏£‡πâ‡∏≠‡∏° QR Code Reader
 * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ESP32 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
 * 
 * ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:
 * - ‡∏≠‡πà‡∏≤‡∏ô QR Code ‡∏ú‡πà‡∏≤‡∏ô Raspberry Pi
 * - ‡∏£‡∏∞‡∏ö‡∏ö FIFO Queue ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Ñ‡∏¥‡∏ß‡∏û‡∏±‡∏™‡∏î‡∏∏
 * - ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏±‡∏Å
 * - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô UART
 */

#include <Arduino.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>   // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö parse JSON

// === ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤ GPIO ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IR Sensor ===
#define IR_DIGITAL_PIN 34      // IR sensor ‡∏´‡∏•‡∏±‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏
#define IR_DIGITAL_PING1 35    // IR sensor ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 1 (‡∏´‡∏≠‡∏û‡∏±‡∏Å 10)
#define IR_DIGITAL_PING2 36    // IR sensor ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 2 (‡∏´‡∏≠‡∏û‡∏±‡∏Å 2)
#define IR_DIGITAL_PING3 39    // IR sensor ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 3 (‡∏´‡∏≠‡∏û‡∏±‡∏Å 6)

// === ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤ L298N Motor Driver ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô ===
#define IN1 26                 // ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå (‡∏Ç‡∏≤ 1)
#define IN2 18                 // ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå (‡∏Ç‡∏≤ 2)
#define ENA 25                 // ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå (PWM)

// === ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤ Motor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏ ===
#define MOTOR0_IN_A 12         // ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏±‡∏Å 1 - ‡∏Ç‡∏≤ A
#define MOTOR0_IN_B 23         // ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏±‡∏Å 1 - ‡∏Ç‡∏≤ B

#define MOTOR1_IN_A 13         // ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏±‡∏Å 2 - ‡∏Ç‡∏≤ A
#define MOTOR1_IN_B 27         // ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏±‡∏Å 2 - ‡∏Ç‡∏≤ B

#define MOTOR2_IN_A 33         // ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏±‡∏Å 3 - ‡∏Ç‡∏≤ A
#define MOTOR2_IN_B 32         // ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏±‡∏Å 3 - ‡∏Ç‡∏≤ B

#define MAX_DORM 10            // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß

// === ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì IR ===
bool flag = false;             // Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IR sensor ‡∏´‡∏•‡∏±‡∏Å
bool flagG1 = false;           // Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IR sensor ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 1
bool flagG2 = false;           // Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IR sensor ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 2
bool flagG3 = false;           // Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IR sensor ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 3

// === ‡∏£‡∏∞‡∏ö‡∏ö FIFO Queue ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏ ===
int dorm[MAX_DORM];            // Array ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏≠‡∏û‡∏±‡∏Å
String tracking_number[MAX_DORM]; // Array ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
int size = 0;                  // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß

// === ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ï‡∏π ===
int gate_count[3] = {0,0,0};   // [‡∏õ‡∏£‡∏∞‡∏ï‡∏π1, ‡∏õ‡∏£‡∏∞‡∏ï‡∏π2, ‡∏õ‡∏£‡∏∞‡∏ï‡∏π3]

int camera_gate_count = 0;     // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß (FIFO)
 * @param value ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏≠‡∏û‡∏±‡∏Å
 * @param trackingNum ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏û‡∏±‡∏™‡∏î‡∏∏
 */
void enqueue(int value, String trackingNum) {
  if (size < MAX_DORM) {
    dorm[size] = value;                    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏≠‡∏û‡∏±‡∏Å
    tracking_number[size] = trackingNum;   // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
    size++;                                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏¥‡∏ß
  } else {
    Serial.println("Queue full, cannot enqueue");
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏≥‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏£‡∏Å (FIFO)
 * @return ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ -1 ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏ß‡πà‡∏≤‡∏á
 */
int dequeue() {
  if (size > 0) {
    int first = dorm[0];                         // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏Å
    String firstTrackingNumber = tracking_number[0];
    
    // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
    for (int i = 1; i < size; i++) {
      dorm[i - 1] = dorm[i];
      tracking_number[i - 1] = tracking_number[i];
    }
    size--;                                      // ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏¥‡∏ß
    return first;
  } else {
    Serial.println("Queue empty");
    return -1;
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏≥‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
 * @param index ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å
 * @return ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ -1 ‡∏´‡∏≤‡∏Å‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
 */
int dequeueAt(int index) {
  if (index < 0 || index >= size) {
    Serial.println("Invalid index");
    return -1;  // error
  }

  int removed = dorm[index];                     // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö

  // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏°‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
  for (int i = index + 1; i < size + 1; i++) {
    dorm[i - 1] = dorm[i];
    tracking_number[i - 1] = tracking_number[i];
  }

  size--;                                        // ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏¥‡∏ß
  return removed;
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô QR Code ‡∏ã‡πâ‡∏≥
 */
int requeue_lastvalue() {
  if (size > 0) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (tracking_number[size - 2] == tracking_number[size - 1]) {
      dorm[size] = dorm[size - 2];                           // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      tracking_number[size] = tracking_number[size - 2];
      dorm[size - 2] = -2;                                   // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß
      tracking_number[size - 2] = "No tracking number";
    } else {
      Serial.println("Tracking number mismatch");
      return -1;
    }
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡πà‡∏≤‡∏ô QR Code ‡πÑ‡∏õ Raspberry Pi ‡∏ú‡πà‡∏≤‡∏ô UART
 * ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ HTTP request
 * @return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Raspberry Pi
 */
String requestQRFromPi() {
  Serial2.println("READ_QR");                    // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ Pi
  unsigned long start = millis();
  String response = "";

  // ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Pi ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  while (millis() - start < 5000) {
    if (Serial2.available()) {
      char c = Serial2.read();
      if (c == '\n') break;                      // ‡∏à‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      response += c;
    }
  }

  return response;
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ú‡πà‡∏≤‡∏ô UART
 * @param trackingNumber ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏û‡∏±‡∏™‡∏î‡∏∏
 * @param status ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà
 */
void updateTrackingStatusOnServer(String trackingNumber, const char *status) {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON message
  String payload = "{";
  payload += "\"type\":\"update_status\",";
  payload += "\"trackingNumber\":\"" + trackingNumber + "\",";
  payload += "\"status\":\"" + String(status) + "\"";
  payload += "}\n";   // newline = end of message

  // ‡∏™‡πà‡∏á‡πÑ‡∏õ Raspberry Pi ‡∏ú‡πà‡∏≤‡∏ô UART
  Serial2.print(payload);

  Serial.println("üì° Sent update via UART: " + payload);
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô
 * @param fb_move ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß (-1=‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á, 0=‡∏´‡∏¢‡∏∏‡∏î, 1=‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
 */
void convayer_move(int fb_move) {
  switch (fb_move) {
    case -1: // ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
      digitalWrite(IN1, LOW);
      digitalWrite(IN2, HIGH);
      ledcWrite(0, 255);                         // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà
      Serial.println("backward");
      break;

    case 0: // ‡∏´‡∏¢‡∏∏‡∏î
      digitalWrite(IN1, LOW);
      digitalWrite(IN2, LOW);
      ledcWrite(0, 0);                           // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß 0
      Serial.println("stop");
      break;

    case 1: // ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      digitalWrite(IN1, HIGH);
      digitalWrite(IN2, LOW);
      ledcWrite(0, 255);                         // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà
      Serial.println("forward");
      break;
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏
 * @param fb_move ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß (1=‡∏ú‡∏•‡∏±‡∏Å, -1=‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö, 0=‡∏´‡∏¢‡∏∏‡∏î)
 * @param time_ms ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß (‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
 * @param motor_id ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå (1-3)
 */
void motor_move(int fb_move, int time_ms, int motor_id) {
  int IN_A, IN_B;

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≤ GPIO ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
  switch (motor_id) {
    case 1: IN_A = MOTOR0_IN_A; IN_B = MOTOR0_IN_B; break;
    case 2: IN_A = MOTOR1_IN_A; IN_B = MOTOR1_IN_B; break;
    case 3: IN_A = MOTOR2_IN_A; IN_B = MOTOR2_IN_B; break;
    default: return;  // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  }

  // ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô
  switch (fb_move) {
    case 1: // ‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ / ‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤
      digitalWrite(IN_A, HIGH);
      digitalWrite(IN_B, LOW);
      break;
    case -1: // ‡∏´‡∏°‡∏∏‡∏ô‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á / ‡∏ó‡∏ß‡∏ô‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤
      digitalWrite(IN_A, LOW);
      digitalWrite(IN_B, HIGH);
      break;
    case 0: // ‡∏´‡∏¢‡∏∏‡∏î
      digitalWrite(IN_A, LOW);
      digitalWrite(IN_B, LOW);
      break;
    default: return;
  }

  delay(time_ms);                                // ‡∏£‡∏≠‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î

  // ‡∏´‡∏¢‡∏∏‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÄ‡∏™‡∏£‡πá‡∏à
  digitalWrite(IN_A, LOW);
  digitalWrite(IN_B, LOW);
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug)
 */
void show_queue() {
  Serial.print("Dorm contents: ");
  for (int i = 0; i < size + 1; i++) {
    Serial.println(dorm[i]);
    Serial.println(" ");
  }
  Serial.println();
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ú‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
 * @param dorm_box ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏ï‡∏π/‡∏´‡∏≠‡∏û‡∏±‡∏Å (1, 2, 3)
 */
void push_box(int dorm_box){
  Serial.println("push Box-------------------");
  Serial.println(gate_count[dorm_box - 1]);
  Serial.println(dorm[gate_count[dorm_box - 1] - 1]);
  show_queue();
  
  switch (dorm_box)
  {
  case 1: // ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 1 - ‡∏´‡∏≠‡∏û‡∏±‡∏Å 10
    if (dorm[gate_count[dorm_box - 1] - 1] == 10){
      convayer_move(0);                          // ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      char * status = (char *)malloc(20 * sizeof(char));
      sprintf(status, "delivered to dorm %d", dorm[gate_count[dorm_box - 1] - 1]);
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      updateTrackingStatusOnServer(tracking_number[gate_count[dorm_box - 1] - 1], status);
      
      Serial.print("push dorm: ");
      Serial.println(dequeueAt(gate_count[dorm_box - 1] - 1));
      gate_count[dorm_box - 1] = gate_count[dorm_box - 1] - 1;
      
      show_queue();                              // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß
      
      // ‡∏ú‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
      motor_move(1,1800,dorm_box);               // ‡∏ú‡∏•‡∏±‡∏Å‡∏≠‡∏≠‡∏Å 1.8 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      motor_move(-1,1700,dorm_box);              // ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö 1.7 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ  
      motor_move(0,50,dorm_box);                 // ‡∏´‡∏¢‡∏∏‡∏î 0.05 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      convayer_move(1);                          // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    }
    break;

  case 2: // ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 2 - ‡∏´‡∏≠‡∏û‡∏±‡∏Å 2
    if (dorm[gate_count[dorm_box-1] - 1] == 2){
      convayer_move(0);                          // ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      char * status = (char *)malloc(20 * sizeof(char));
      sprintf(status, "delivered to dorm %d", dorm[gate_count[dorm_box - 1] - 1]);
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      updateTrackingStatusOnServer(tracking_number[gate_count[dorm_box - 1] - 1], status);
      
      Serial.print("push dorm: ");
      Serial.println(dequeueAt(gate_count[dorm_box - 1] - 1));
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      gate_count[dorm_box - 1] = gate_count[dorm_box - 1] - 1;
      gate_count[dorm_box - 2] = gate_count[dorm_box - 2] - 1;
      
      show_queue();                              // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß
      
      // ‡∏ú‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
      motor_move(1,1800,dorm_box);               // ‡∏ú‡∏•‡∏±‡∏Å‡∏≠‡∏≠‡∏Å 1.8 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      motor_move(-1,1700,dorm_box);              // ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö 1.7 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      motor_move(0,50,dorm_box);                 // ‡∏´‡∏¢‡∏∏‡∏î 0.05 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      convayer_move(1);                          // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      Serial.println(dorm[0]);
    }
    break;

  case 3: // ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 3 - ‡∏´‡∏≠‡∏û‡∏±‡∏Å 6
    if (dorm[gate_count[dorm_box-1] - 1] == 6){
      convayer_move(0);                          // ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      char * status = (char *)malloc(20 * sizeof(char));
      sprintf(status, "delivered to dorm %d", dorm[gate_count[dorm_box - 1] - 1]);
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      updateTrackingStatusOnServer(tracking_number[gate_count[dorm_box - 1] - 1], status);
      
      Serial.print("push dorm: ");
      Serial.println(dequeueAt(gate_count[dorm_box - 1] - 1));
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      gate_count[dorm_box - 1] = gate_count[dorm_box - 1] - 1;
      gate_count[dorm_box - 2] = gate_count[dorm_box - 2] - 1;
      gate_count[dorm_box - 3] = gate_count[dorm_box - 3] - 1;
      
      show_queue();                              // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß
      
      // ‡∏ú‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
      motor_move(1,1800,dorm_box);               // ‡∏ú‡∏•‡∏±‡∏Å‡∏≠‡∏≠‡∏Å 1.8 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      motor_move(-1,1650,dorm_box);              // ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö 1.65 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      motor_move(0,50,dorm_box);                 // ‡∏´‡∏¢‡∏∏‡∏î 0.05 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      convayer_move(1);                          // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    }
    else {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ô‡∏µ‡πâ - ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
      Serial.print("push box no form: ");
      Serial.println(dequeueAt(gate_count[dorm_box - 1] - 1));
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      gate_count[dorm_box - 1] = gate_count[dorm_box - 1] - 1;
      gate_count[dorm_box - 2] = gate_count[dorm_box - 2] - 1;
      gate_count[dorm_box - 3] = gate_count[dorm_box - 3] - 1;
      
      show_queue();                              // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß
      Serial.println();
      Serial.println("No box for this dorm");
    }
    break;
  
  default:
    break;
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Setup - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
 */
void setup() {
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Serial communication
  Serial.begin(115200);                         // Serial ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
  Serial2.begin(115200, SERIAL_8N1, 16, 17);   // Serial2 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Raspberry Pi (RX=16, TX=17)

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≤ IR Sensor ‡πÄ‡∏õ‡πá‡∏ô INPUT
  pinMode(IR_DIGITAL_PIN, INPUT);               // IR sensor ‡∏´‡∏•‡∏±‡∏Å
  pinMode(IR_DIGITAL_PING1, INPUT);             // IR sensor ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 1
  pinMode(IR_DIGITAL_PING2, INPUT);             // IR sensor ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 2
  pinMode(IR_DIGITAL_PING3, INPUT);             // IR sensor ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 3

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≤‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô OUTPUT
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≤‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏±‡∏Å 1 ‡πÄ‡∏õ‡πá‡∏ô OUTPUT
  pinMode(MOTOR0_IN_A, OUTPUT);
  pinMode(MOTOR0_IN_B, OUTPUT);
  digitalWrite(MOTOR0_IN_A, LOW);               // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô LOW
  digitalWrite(MOTOR0_IN_B, LOW);

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≤‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏±‡∏Å 2 ‡πÄ‡∏õ‡πá‡∏ô OUTPUT
  pinMode(MOTOR1_IN_A, OUTPUT);
  pinMode(MOTOR1_IN_B, OUTPUT);
  digitalWrite(MOTOR1_IN_A, LOW);               // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô LOW
  digitalWrite(MOTOR1_IN_B, LOW);

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≤‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏±‡∏Å 3 ‡πÄ‡∏õ‡πá‡∏ô OUTPUT
  pinMode(MOTOR2_IN_A, OUTPUT);
  pinMode(MOTOR2_IN_B, OUTPUT);
  digitalWrite(MOTOR2_IN_A, LOW);               // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô LOW
  digitalWrite(MOTOR2_IN_B, LOW);

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PWM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô
  ledcSetup(0, 5000, 8);                       // Channel 0, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà 5kHz, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î 8 ‡∏ö‡∏¥‡∏ï
  ledcAttachPin(ENA, 0);                       // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≤ ENA ‡∏Å‡∏±‡∏ö PWM channel 0

  convayer_move(0);                            // ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  convayer_move(1);                            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Loop ‡∏´‡∏•‡∏±‡∏Å - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏ô‡∏ã‡πâ‡∏≥
 */
void loop() {
  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å IR Sensor ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  int IRCamera = digitalRead(IR_DIGITAL_PIN) ^ HIGH;    // IR ‡∏´‡∏•‡∏±‡∏Å (invert signal)
  int IRCameraG1 = (digitalRead(IR_DIGITAL_PING1) ^ HIGH) * 1;  // IR ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 1
  int IRCameraG2 = (digitalRead(IR_DIGITAL_PING2) ^ HIGH) * 2;  // IR ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 2  
  int IRCameraG3 = (digitalRead(IR_DIGITAL_PING3) ^ HIGH) * 3;  // IR ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 3
  int IRCameraBB = IRCameraG1 + IRCameraG2 + IRCameraG3;        // ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤ IR ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (dorm[0] != 0){

    // === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IR Sensor ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 1 ===
    if ((IRCameraG1 == 1) && flagG1 && (gate_count[0] + 1 > gate_count[1]) && (gate_count[0] + 1 > gate_count[2]) && (gate_count[0] + 1 <= size)){
      flagG1 = false;                           // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï flag
      gate_count[0] = gate_count[0] + 1;        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ï‡∏π 1
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏ï‡∏π
      Serial.print("Gate 1: ");
      Serial.println(gate_count[0]);
      Serial.print("Gate 2: ");
      Serial.println(gate_count[1]);
      Serial.print("Gate 3: ");
      Serial.println(gate_count[2]);
      
      push_box(1);                              // ‡∏ú‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π 1
    }
    else if ((IRCameraG1 == 0) && (flagG1 == false)){
      flagG1 = true;                            // ‡∏ï‡∏±‡πâ‡∏á flag ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
    }
  
    // === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IR Sensor ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 2 ===
    if (IRCameraG2 == 2 && flagG2 && (gate_count[1] + 1 <= gate_count[0]) && (gate_count[1] + 1 > gate_count[2])){
      flagG2 = false;                           // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï flag
      gate_count[1] = gate_count[1] + 1;        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ï‡∏π 2
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏ï‡∏π
      Serial.print("Gate 1: ");
      Serial.println(gate_count[0]);
      Serial.print("Gate 2: ");
      Serial.println(gate_count[1]);
      Serial.print("Gate 3: ");
      Serial.println(gate_count[2]);
      
      push_box(2);                              // ‡∏ú‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π 2
    }
    else if ((IRCameraG2 == 0) && (flagG2 == false)){
      flagG2 = true;                            // ‡∏ï‡∏±‡πâ‡∏á flag ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
    }
  
    // === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IR Sensor ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 3 ===
    if (IRCameraG3 == 3 && flagG3 && (gate_count[2] + 1 <= gate_count[0]) && (gate_count[2] + 1 <= gate_count[1])){
      flagG3 = false;                           // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï flag
      gate_count[2] = gate_count[2] + 1;        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ï‡∏π 3
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏ï‡∏π
      Serial.print("Gate 1: ");
      Serial.println(gate_count[0]);
      Serial.print("Gate 2: ");
      Serial.println(gate_count[1]);
      Serial.print("Gate 3: ");
      Serial.println(gate_count[2]);
      
      push_box(3);                              // ‡∏ú‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π 3
    }
    else if ((IRCameraG3 == 0) && (flagG3 == false)){
      flagG3 = true;                            // ‡∏ï‡∏±‡πâ‡∏á flag ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
    }
  }

  // === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IR Sensor ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÉ‡∏´‡∏°‡πà ===
  if (IRCamera == HIGH && flag) {
    convayer_move(0);                           // ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ IR ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÉ‡∏î‡πÜ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏¥‡∏ß‡∏ß‡πà‡∏≤‡∏á
    if ((IR_DIGITAL_PING1 == LOW) && (IR_DIGITAL_PING2 == LOW) && (IR_DIGITAL_PING3 == LOW) && (size == 0)) {
      // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      for (int i = 0; i < MAX_DORM; i++) {
        dorm[i] = 0;
        tracking_number[i] = "";
      }
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      gate_count[0] = 0;
      gate_count[1] = 0;
      gate_count[2] = 0;
    }
    
    flag = false;                               // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï flag
    Serial.println("IR Triggered! Sending request to Raspberry Pi...");
    delay(300);                                 // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
    
    // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡πà‡∏≤‡∏ô QR Code ‡πÑ‡∏õ Raspberry Pi ‡∏ú‡πà‡∏≤‡∏ô UART
    String response = requestQRFromPi();        // üëà ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Pi ‡∏ú‡πà‡∏≤‡∏ô Serial
    Serial.println("Response from Pi: " + response);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (response.length() > 0) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON document ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö parse ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      StaticJsonDocument<256> doc;
      DeserializationError error = deserializeJson(doc, response);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ parse JSON ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!error) {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON
        int mappedLabel = doc["mapped_label"] | -2;         // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏≠‡∏û‡∏±‡∏Å (-2 ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
        String trackingNumber = doc["qr_text"] | "No tracking number";  // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        Serial.print("Tracking Number: ");
        Serial.println(trackingNumber);
        Serial.print("Mapped Label: ");
        Serial.println(mappedLabel);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏î‡∏Å‡πá‡∏ï‡∏≤‡∏°)
        enqueue(mappedLabel, trackingNumber);
        requeue_lastvalue();                    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏ã‡πâ‡∏≥
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß
        Serial.print("Queue size: ");
        Serial.println(size);
        show_queue();
      } else {
        Serial.println("JSON parse failed!");  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏≤‡∏Å parse ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      }
    }
    convayer_move(1);                           // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  } 
  else if ((IRCamera == LOW) && (flag == false)) {
    flag = true;                                // ‡∏ï‡∏±‡πâ‡∏á flag ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏±‡∏™‡∏î‡∏∏
  }

  delay(50);                                    // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 50ms ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏ô‡∏ã‡πâ‡∏≥
}